OOPs (Object-Oriented Programming) Concepts in Java

The aim of object-oriented programming is to implement real-world entities, for example, object, classes, abstraction, inheritance, 
polymorphism, etc.
Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm
 to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:
 
Object:
 Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical
  or logical.
 An Object can be defined as an instance of a class. It contains an address and takes up some space in memory.
 Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, 
  eating, etc.
  
Class:
 Collection of objects is called class. It is a logical entity.
 A class can also be defined as a blueprint from which you can create an individual object. Class does not consume any space.
 
Inheritance
 When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. 
 It provides code reusability. 
 It is used to achieve runtime polymorphism.

Polymorphism
 If one task is performed in different ways, it is known as polymorphism. 
 For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
 In Java, we use method overloading and method overriding to achieve polymorphism.
 
Abstraction
 Hiding internal implementation and showing functionality only to the user is known as abstraction. For example, phone call, 
  we do not know the internal processing.
 In Java, we use abstract class and interface to achieve abstraction.
 
Encapsulation:
 Binding (or wrapping) code and data together into a single unit are known as encapsulation. 
 For example, a capsule, it is wrapped with different medicines.
 A Java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.